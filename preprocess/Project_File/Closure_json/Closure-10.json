{"id":821,"status":"Fixed","summary":"Wrong code generated if mixing types in ternary operator","labels":["Type-Defect","Priority-High"],"stars":0,"commentCount":3,"comments":[{"id":0,"commenterId":675875141201202545,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. Use Google Closure Compiler to compile this code:\r\n\r\n    var a \u003d(Math.random()\u0026gt;0.5? \u00271\u0027 : 2 ) + 3 + 4;\r\n\r\nYou can either simple or advanced. It doesn\u0027t matter\r\n\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n\r\nI\u0027m seeing this as a result:\r\n    var a \u003d (0.5 \u0026lt; Math.random() ? 1 : 2) + 7;\r\n\r\nThis is obviously wrong as the \u00271\u0027 string literal got converted to a number, and 3+4 got combined into 7 while that\u0027s not ok as \u00271\u0027 + 3 + 4 \u003d \u0027134\u0027, not \u002717\u0027.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\n\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\n\r\nSeems like this issue happens only when you are mixing types together. If both 1 and 2 are string literals or if they are both numbers it won\u0027t happen. I was also a little surprised to see this happening in simple mode as it actually breaks the behavior.","timestamp":1348222633,"attachments":[]},{"id":1,"commenterId":-5060162230523776870,"content":"Thank you for the report!","timestamp":1348242240,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r2206.","timestamp":1348268314,"attachments":[]}]}