{"id":144,"status":"Fixed","summary":"Only assignment to \"this\" issues a \"dangerous use of the global this object\" warning.","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":5,"comments":[{"id":0,"commenterId":-8565359677229908361,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. Compile this:\r\n//////////////////////////////////////////\r\n// \u003d\u003dClosureCompiler\u003d\u003d\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// \u003d\u003d/ClosureCompiler\u003d\u003d\r\n\r\n/** @constructor */\r\nfunction Foo()\r\n{\r\n    this._bar \u003d null;\r\n};\r\n\r\n/** @this {Foo} */\r\nfunction writeMethodWithAnnotation()\r\n{\r\n   this._bar \u003d 123; // no warning. ok\r\n}\r\n\r\n/** @this {Foo} */\r\nfunction readMethodWithAnnotation()\r\n{\r\n   return this._bar; // no warning. ok\r\n}\r\n\r\n//----\r\n\r\nfunction writeMethodWithoutAnnotation()\r\n{\r\n   this._bar \u003d 123; // warning. ok.\r\n}\r\n\r\nfunction readMethodWithoutAnnotation()\r\n{\r\n   return this._bar; // \u0026lt;- No warning!\r\n}\r\n//////////////////////////////////////////\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n- Should get two \u0026quot;dangerous use of the global this object\u0026quot; warnings in the \r\nreadMethodWithAnnotation and writeMethodWithoutAnnotation functions.\r\n- Only writeMethodWithoutAnnotation warns.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nBoth 20100330 and online compiler.\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\nref: http://code.google.com/closure/compiler/docs/js-for-compiler.html \r\n\u0026quot;To prevent compiler warnings, you must use a @this annotation whenever \r\nthis appears in a function that is neither a prototype method nor a \r\nfunction marked as a @constructor.\u0026quot;\r\n\r\nThis also means the example code in the docs won\u0027t trig a warning.\r\n-----\r\n/**\r\n * Returns the roster widget element.\r\n * @this {Widget} \u0026lt;-- currently this doesn\u0027t matter\r\n * @return {Element}\r\n */\r\nfunction() {\r\n  return this.getComponent().getElement();\r\n});\r\n------\r\n\r\n// Fredrik","timestamp":1271077130,"attachments":[]},{"id":1,"commenterId":-7699928860083865744,"content":"thanks for the report. i think this may have been deliberate, but i don\u0027t remember why \r\nat the moment. it seems wrong now that you mention it. i\u0027ll take a look and report \r\nback.","timestamp":1271132657,"attachments":[]},{"id":2,"commenterId":-8565359677229908361,"content":"Great. Worth noting might be that the title is slightly misleading, it isn\u0027t actually \r\nrestricted to direct assignment to \"this\". Rather anything that \"looks like\" assignment \r\nwith \"this\" appearing in the LHS triggers the warning. \r\n\r\nfunction test()\r\n{\r\n   // multi-level test\r\n   this.asdf().asdf().x \u003d 123; // warns. ok\r\n   return this.asdf().asdf().x; // No warning (similar to the widget example in docs)\r\n}\r\n","timestamp":1271163802,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"the problem is that we *do* want to allow things like:\r\n\r\nfunction createGetter() {\r\n  return function() { return this; };\r\n}\r\n\r\nwithout special annotation.\r\n\r\ni think the new heuristic should probably be something like \"warn if a property of \r\nthis is being assigned or accessed\"","timestamp":1274901878,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"fixed in r234","timestamp":1275025557,"attachments":[]}]}