{"id":1101,"status":"Fixed","summary":"Erroneous optimization in ADVANCED_OPTIMIZATIONS mode","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":17,"comments":[{"id":0,"commenterId":3597220718081656524,"content":"\r\n\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n\r\n1. Create a file input.js with the following \u0026quot;minimal\u0026quot; test case:\r\n\r\n    window[\u0026quot;anchor\u0026quot;] \u003d function (obj, modifiesProp) {\r\n        return (function (saved) {\r\n            return modifiesProp(obj) + saved;\r\n        })(obj[\u0026quot;prop\u0026quot;]);\r\n    }\r\n\r\n2. Compile it with:\r\n\r\n    java -jar .../build/compiler.jar                    \\\r\n        --compilation_level ADVANCED_OPTIMIZATIONS      \\\r\n        --warning_level VERBOSE                         \\\r\n        --externs window.js                             \\\r\n        --js input.js                                   \\\r\n        --js_output_file output.js\r\n\r\n3. That\u0027s all!\r\n\r\nWhat is the expected output?\r\n\r\n    window.foo\u003dfunction(a,b){var HOLD\u003da.prop;return b(a)+HOLD};\r\n\r\nWhat do you see instead?\r\n\r\n    window.foo\u003dfunction(a,b){return b(a)+a.prop};\r\n\r\nNote how this is semantically very different if modifiesProp/b (whose\r\nsemantics are unknown to the compiler) side-effects a.prop.\r\n\r\nThe evaluation order of + is well-defined in EcmaScript 5, but even\r\nthen, this happens even if one substitutes the , (comma) operator.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\n\r\nGit HEAD\r\n\r\n    commit 4a62ee4bca02169dd77a6f26ed64a624b3f05f95\r\n    Author: Chad Killingsworth \u0026lt;chadkillingsworth@missouristate.edu\u0026gt;\r\n    Date:   Wed Sep 25 14:52:28 2013 -0500\r\n    \r\n        Add history.state to html5 externs\r\n\r\non Linux.","timestamp":1380185999,"attachments":[]},{"id":1,"commenterId":3597220718081656524,"content":"I had another look at this, and have cooked up the attached patch, which\r\n*seems* safe (as it only disables optimizations), but wreaks havoc in\r\nthe inliner\u0027s test suite.\r\n\r\nDisabling \"direct call node\" inlining on Node.mayHaveSideEffects() may\r\nseem a bit drastic, but a downstream pass still performs inlining—while\r\nintroducing the required temp!—on my small test case.  Not sure if/when\r\nthat pass is activated, though, so the change may have a more dramatic\r\neffect on some code bases.\r\n\r\nUnfortunately, I lack the time to study the innards of Closure and sift\r\nthrough these failures; it would be great if somebody familiar with the\r\ncompiler could comment on the next steps to undertake.\r\n\r\nCheers,\r\nDamien Diederen","timestamp":1380207158,"attachments":[{"id":11010001000,"fileName":"0001-Do-not-directly-replace-a-call-where-return-may-have.patch","fileSize":1382}]},{"id":2,"commenterId":-5060162230523776870,"content":"ouch, thanks for the report.  The change in the patch is overly aggressive: we don\u0027t need to do this if there aren\u0027t any arguments or all of the arguments are literals or otherwise can\u0027t be side-effected.\r\n\r\nIf you want to try your hand at a better patch:\r\n\r\nchange \"canInlineReferenceDirectly\" to check if the function body has side-effects and if it does back out if any of the arguments can be side-effected (NodeUtil.canBeSideEffected)","timestamp":1380240692,"attachments":[]},{"id":3,"commenterId":3597220718081656524,"content":"Hi John,\r\n\r\nThanks for the suggestions!\r\n\r\nI had a stab at fixing this in a less impactful way (patch attached),\r\nand am now down to eight failing tests; here is a quick/preliminary\r\nanalysis:\r\n\r\n 1. testInlineFunctions6: Now introduces extra temps;\r\n\r\n 2. testInlineFunctions22: Idem;\r\n\r\n 3. testInlineFunctions23: Idem;\r\n\r\n 4. testDoubleInlining1: The argument is possibly modified, but in a\r\n    tail position;\r\n\r\n 5. testNoInlineIfParametersModified8: The serialized results match, but\r\n    the test-generated tree includes an additional BLOCK for some\r\n    reason;\r\n\r\n 6. testNoInlineIfParametersModified9: Idem;\r\n\r\n 7. testIssue1101: My own test; same extra BLOCK;\r\n\r\n 8. testBug4944818: Haven\u0027t looked into it.\r\n\r\nFeel free to write down further clues that you may have, in case I\r\nmanage to have another look at this before your team gets to it.\r\n\r\nCheers, -D","timestamp":1380466183,"attachments":[{"id":11010003000,"fileName":"v2-0001-Do-not-directly-replace-a-call-where-return-may-h.patch","fileSize":4534}]},{"id":4,"commenterId":8173196008570380122,"content":"https://codereview.appspot.com/14124043/","timestamp":1380549406,"attachments":[]},{"id":5,"commenterId":-5060162230523776870,"content":"","timestamp":1380562100,"attachments":[]},{"id":6,"commenterId":-5060162230523776870,"content":"Can you sign a CLA? https://code.google.com/p/closure-compiler/wiki/Contributors","timestamp":1380563168,"attachments":[]},{"id":7,"commenterId":-5060162230523776870,"content":"I\u0027ll take it from here.","timestamp":1380575447,"attachments":[]},{"id":8,"commenterId":3597220718081656524,"content":"Hi John, Chad,\r\n\r\nI have submitted an electronically signed individual CLA; it should be\r\n\"processed shortly\"; the \"key\" was p9iNysFj43uDtUPeRrKvGNQ.\r\n\r\nCheers, -D\r\n","timestamp":1380578673,"attachments":[]},{"id":9,"commenterId":-8769171937076622550,"content":"This issue was closed by revision b80dfd3b0e5e.","timestamp":1380672080,"attachments":[]},{"id":10,"commenterId":-8769171937076622550,"content":"This issue was closed by revision 4597738e8898.","timestamp":1380672082,"attachments":[]},{"id":11,"commenterId":-5060162230523776870,"content":"This was rollback due to some internal issues.  I hope to take another look this week.","timestamp":1381159721,"attachments":[]},{"id":12,"commenterId":-8769171937076622550,"content":"This issue was closed by revision b80dfd3b0e5e.","timestamp":1381947637,"attachments":[]},{"id":13,"commenterId":-8769171937076622550,"content":"This issue was closed by revision 4597738e8898.","timestamp":1381947639,"attachments":[]},{"id":14,"commenterId":-8769171937076622550,"content":"This issue was closed by revision 038da2119223.","timestamp":1383592855,"attachments":[]},{"id":15,"commenterId":-8769171937076622550,"content":"This issue was closed by revision 038da2119223.","timestamp":1384541464,"attachments":[]},{"id":16,"commenterId":3597220718081656524,"content":"Finally got to bump the version of closure used in my project, and can confirm the fix.  Thanks!","timestamp":1401712400,"attachments":[]}]}