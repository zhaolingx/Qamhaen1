{"id":1024,"status":"Fixed","summary":"Prototype method incorrectly removed","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":15,"comments":[{"id":0,"commenterId":8173196008570380122,"content":"// \u003d\u003dClosureCompiler\u003d\u003d\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @formatting pretty_print\r\n// \u003d\u003d/ClosureCompiler\u003d\u003d\r\n\r\n/** @const */\r\nvar foo \u003d {};\r\nfoo.bar \u003d {\r\n  \u0027bar1\u0027: function() { console.log(\u0027bar1\u0027); }\r\n}\r\n\r\n/** @constructor */\r\nfunction foobar() {}\r\nfoobar.prototype \u003d foo.bar;\r\n\r\nfoo.foobar \u003d new foobar;\r\n\r\nconsole.log(foo.foobar[\u0027bar1\u0027]);","timestamp":1371220163,"attachments":[]},{"id":1,"commenterId":8173196008570380122,"content":"While in the above snippet the prototype method is completely removed, the actual case I came across was doing prototype devirtualization on the quoted prototype property.\r\n\r\nSomething akin to:\r\n\r\nfoo.foobar.foobar_prototype$bar1 \u003d true;\r\n\r\nWhich is also bad","timestamp":1371222635,"attachments":[]},{"id":2,"commenterId":-5060162230523776870,"content":"Thanks for the report.\r\n\r\nRe: comment #1. Devirtualization only happens with functions.  Disambiguate properties will not remove it from the prototype.  It would be good to know which case you saw.  Neither should modify quoted properties.\r\n\r\n","timestamp":1371568866,"attachments":[]},{"id":3,"commenterId":8173196008570380122,"content":"Let me try it without ambituate/disambituate turned on and see if it still occurs in the original source. If it helps, the original problem is:\r\n\r\nPrototype assignment -\u003e https://github.com/jquery/sizzle/blob/master/sizzle.js#L1393\r\nProperties affected -\u003e https://github.com/jquery/sizzle/blob/master/sizzle.js#L1183\r\n\r\nWhen I tried to create repo cases, I could only get complete removal to occur.","timestamp":1371569252,"attachments":[]},{"id":4,"commenterId":8173196008570380122,"content":"It does appear to be an ambiguate/disambiguate problem.\r\n\r\nWould it help if I uploaded the test files?","timestamp":1371586866,"attachments":[]},{"id":5,"commenterId":-5060162230523776870,"content":"yes, it would.","timestamp":1371673366,"attachments":[]},{"id":6,"commenterId":8173196008570380122,"content":"Compilation arguments:\r\n--compilation_level ADVANCED_OPTIMIZATIONS --warning_level VERBOSE --use_types_for_optimization --externs issue1024externs.js --js issue1024code.js --formatting PRETTY_PRINT --debug\r\n\r\nUncompiled line numbers: 1214, 1427\r\nCompiled line number: 682\r\n\r\nTwo warnings are expected (and unrelated).","timestamp":1371738327,"attachments":[{"id":10240006000,"fileName":"issue1024code.js","fileSize":115385},{"id":10240006001,"fileName":"issue1024externs.js","fileSize":49477}]},{"id":7,"commenterId":-5060162230523776870,"content":"Using:\r\n\r\n// \u003d\u003dClosureCompiler\u003d\u003d\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @code_url https://closure-compiler.googlecode.com/issues/attachment?aid\u003d10240006000\u0026name\u003dissue1024code.js\u0026token\u003dDgSPbE2vzBM3gJRt2CuVVwWIAoQ%3A1377294668082\r\n// @externs_url https://closure-compiler.googlecode.com/issues/attachment?aid\u003d10240006001\u0026name\u003dissue1024externs.js\u0026token\u003dxPbcWt0s89sOIh7D6-V5QCfrjvE%3A1377294668082\r\n// @use_types_for_optimization true\r\n// @warning_level VERBOSE\r\n// @formatting pretty_print\r\n// @debug true\r\n// \u003d\u003d/ClosureCompiler\u003d\u003d\r\n\r\nI was able to see: the quoted \"not\" property renamed as:\r\n\r\nsetFilters_prototype$not\r\n\r\nwhich is disambiguate properties at work, but I\u0027m not sure if it is confused by the type system or is confusing itself.","timestamp":1377309687,"attachments":[]},{"id":8,"commenterId":-5060162230523776870,"content":"Note it doesn\u0027t change it from a quoted property so it remains setFilters_prototype$not in the output.","timestamp":1377310124,"attachments":[]},{"id":9,"commenterId":8173196008570380122,"content":"That\u0027s the property behavior I was having. I couldn\u0027t figure out what type annotations (if any) were causing the issue.","timestamp":1377310676,"attachments":[]},{"id":10,"commenterId":8173196008570380122,"content":"Actually why should type annotations matter? If it\u0027s quoted, disambiguate properties should bail on renaming. This is probably what\u0027s going on in the simple case I originally posted as well.","timestamp":1377344231,"attachments":[]},{"id":11,"commenterId":-5060162230523776870,"content":"I have a fix pending (a one liner essentially plus some unit tests).   Basically, I was misunderstanding what you were originally saying.  The clues were there but \"removed\" and \"devirtualized\" were misleading to me.  The property was still there just inappropriately renamed by disambiguate properties.     The fix will most likely land on Monday.   Longer term we need to add some \"isThisAnExternalProperty\" method in a calling convention.   It isn\u0027t really good to have the ALL_UNQUOTED property renaming policy hard coded into all our passes.","timestamp":1377383053,"attachments":[]},{"id":12,"commenterId":8173196008570380122,"content":"Thanks John. Sorry about the confusion.","timestamp":1377525886,"attachments":[]},{"id":13,"commenterId":-8769171937076622550,"content":"This issue was closed by revision f17961ae4d3d.","timestamp":1377536463,"attachments":[]},{"id":14,"commenterId":-8769171937076622550,"content":"This issue was closed by revision f17961ae4d3d.","timestamp":1381947630,"attachments":[]}]}