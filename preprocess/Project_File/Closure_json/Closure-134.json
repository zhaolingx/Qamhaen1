{"id":86,"status":"Fixed","summary":"@inheritDoc doesn\u0027t play well with interfaces","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":7,"comments":[{"id":0,"commenterId":-4235029491105456897,"content":"If I use interface inheritance with @inheritDoc, the compiler doesn\u0027t \r\nknow about the types used in the method signature.\r\n\r\nSample code:\r\n\r\n/**\r\n * Interface\r\n * @interface\r\n */\r\nA \u003d function() {};\r\n\r\n/**\r\n * @param {string} a\r\n */\r\nA.prototype.foo \u003d function(a) {};\r\n\r\n/**\r\n * @constructor\r\n * @implements {A}\r\n */\r\nB \u003d function() {};\r\n\r\n/**\r\n * @inheritDoc\r\n */\r\nB.prototype.foo \u003d function(a) {\r\n  alert(a.substring(0));   //  ERROR - could not determine the type of \r\nthis expression\r\n};","timestamp":1262629783,"attachments":[]},{"id":1,"commenterId":-4235029491105456897,"content":"I should add, this only shows up with --report_unknown_types turned on.","timestamp":1262631634,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"","timestamp":1262896625,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"should be fixed at head","timestamp":1262987246,"attachments":[]},{"id":4,"commenterId":-4503344881545153734,"content":"Are you sure this is fixed? I just tried this on http://closure-compiler.appspot.com/ and it didn\u0027t produce any warnings\r\n\r\n\r\n/** @interface */\r\nA \u003d function() {};\r\n\r\n/** @param {string} a */\r\nA.prototype.foo \u003d function( a) {};\r\n\r\n/**\r\n* @constructor\r\n* @implements {A}\r\n*/\r\nB \u003d function() {};\r\n\r\n/** @inheritDoc */\r\nB.prototype.foo \u003d function( a) {\r\nalert(a.substring(0));\r\n};\r\n\r\nvar inst \u003d new B();\r\ninst.foo(1);\r\n\r\n\r\nBut this _does_ produce warnings\r\n\r\n/** @interface */\r\nA \u003d function() {};\r\n\r\n/** @param {string} a */\r\nA.prototype.foo \u003d function( a) {};\r\n\r\n/**\r\n* @constructor\r\n* @implements {A}\r\n*/\r\nB \u003d function() {};\r\n\r\n/** @param {string} a */\r\nB.prototype.foo \u003d function( a) {\r\nalert(a.substring(0));\r\n};\r\n\r\nvar inst \u003d new B();\r\ninst.foo(1);","timestamp":1363909222,"attachments":[]},{"id":5,"commenterId":6016728284988663100,"content":"This is not fixed. Nicolas, could you reopen the bug?","timestamp":1438216657,"attachments":[]},{"id":6,"commenterId":4865484112040790759,"content":"If you think this is not fixed, please re-open a bug on github with a repro case. The example here works if you declare A and B rather than leave them as global variables. (You can try it on appspot.)\r\n\r\n/** @interface */\r\nvar A \u003d function() {};\r\n\r\n/** @param {string} a */\r\nA.prototype.foo \u003d function( a) {};\r\n\r\n/**\r\n* @constructor\r\n* @implements {A}\r\n*/\r\nvar B \u003d function() {};\r\n\r\n/** @inheritDoc */\r\nB.prototype.foo \u003d function( a) {\r\nalert(a.substring(0));\r\n};\r\n\r\nvar inst \u003d new B();\r\ninst.foo(1);\r\n\r\n\r\nThe varcheck pass of the compiler, which runs before type checking, warns about global variables in the code.","timestamp":1438233317,"attachments":[]}]}