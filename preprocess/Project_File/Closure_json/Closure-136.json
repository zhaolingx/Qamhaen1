{"id":103,"status":"Fixed","summary":"$super is replaced when it should not be replaced","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":12,"comments":[{"id":0,"commenterId":-7686483319032304251,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. Have javascript using prototype\u0027s $super\r\n2. Compile with advanced_optimizations\r\n3. See that $super is replaced by for example $super$$4\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n$super should not be renamed as it is used by prototype.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nLatest from svn.\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\nPersonally I made a quick fix in MakeDeclaredNamesUnique.java line 79:\r\nif (t.getCompiler().getCodingConvention().isExported(name)) { continue; }\r\nThis fixed it for me, but not sure if that\u0027s the right place or method to\r\nsolve this, as I am unfamiliar with the project.","timestamp":1265486639,"attachments":[]},{"id":1,"commenterId":436477103612417078,"content":"Quick question: Are you building from the command line, or using Closure Compiler programmatically?  What \r\ndoes your command line to the compiler look like?","timestamp":1265650854,"attachments":[]},{"id":2,"commenterId":-7686483319032304251,"content":"Comment deleted","timestamp":1265657369,"attachments":[]},{"id":3,"commenterId":-7686483319032304251,"content":"I am building from the command line, here\u0027s what the command looks like:\r\n\r\njava -jar /Users/jochen/closure/build/compiler.jar --compilation_level\r\nADVANCED_OPTIMIZATIONS --js share.js --module share:1 --js main.js --module main:1\r\n--js recording.js --module recording:1 --js comments.form.js --module commentsform:1\r\n--js facebook.share.js --module facebookshare:1 --externs prototype.js\r\n--module_output_path_prefix /Users/jochen/ruby/karaoke/public/javascripts/compiled/","timestamp":1265657398,"attachments":[]},{"id":4,"commenterId":436477103612417078,"content":"That looks like the right fix.   Want to add a test case, and submit the change to the project?  (Hint: the tests run \r\nin the Google coding convention, so a leading underbar is the sign of an exported name.)","timestamp":1265683182,"attachments":[]},{"id":5,"commenterId":1948758734812428220,"content":"What is the effect of the change?\r\n\r\n$super needs to be unique during the name normalization or this would break inlining \r\nright?","timestamp":1265685912,"attachments":[]},{"id":6,"commenterId":-7699928860083865744,"content":"how does $super work again? wouldn\u0027t it be impossible to inline the function anyway, \r\nbecause it uses crazy reflection?","timestamp":1265690359,"attachments":[]},{"id":7,"commenterId":-5060162230523776870,"content":"I feel a uncomfortable with breaking the normalization for this.  I would prefer to \r\nspecial case the renaming to look for \"$super$...\" and change this back to \"$super\" \r\nsince we are already special casing it there to prevent it from being renamed in the \r\nfirst place.  If it were to be inlined it would become (currently) something like \r\nJSCompiler_inline_$super... so would be broken regardless of the normalization so I \r\nwould assume this doesn\u0027t happen but someone should check.","timestamp":1265698723,"attachments":[]},{"id":8,"commenterId":436477103612417078,"content":"If the first parameter of a method on a class object is $super, Prototype\u0027s code for setting up the class (in \r\naddMethod)  inserts a reference to the superclass.  Here\u0027s the relevant code:\r\n\r\nClass.Methods {\r\n  addMethods: function(source) {\r\n    var ancestor   \u003d this.superclass \u0026\u0026 this.superclass.prototype;\r\n    var properties \u003d Object.keys(source);\r\n   ...\r\n   for (var i \u003d 0, length \u003d properties.length; i \u003c length; i++) {\r\n      var property \u003d properties[i], value \u003d source[property];\r\n      if (ancestor \u0026\u0026 Object.isFunction(value) \u0026\u0026\r\n          value.argumentNames().first() \u003d\u003d \"$super\") {\r\n         ....\r\n\r\nAlan added a change in November to avoid renaming $super by marking it as an exported symbol in the \r\nDefaultCodingConvention.  To correctly compile Prototype code in advanced mode, we\u0027ll need to make sure \r\nthe setup code for the class correctly does the parameter substitution.\r\n\r\nSee\r\nhttp://www.prototypejs.org/assets/2008/9/29/prototype-1.6.0.3.js\r\nhttp://www.prototypejs.org/api/class/create","timestamp":1265737420,"attachments":[]},{"id":9,"commenterId":-5060162230523776870,"content":"To make my comment clear, one of the points of the normalization is to make it easier\r\nfor passes if the \"x\" they saw is the same \"x\" they saw earlier (without needing to\r\ntrack scope).  This makes things much easier for code motion because you don\u0027t need\r\nto worry about masking a variable of the same name.  If you change it \"$super\" is not\r\nunique the results would be unpredictable. After renaming it doesn\u0027t matter if the\r\nname is unique as the normalization is expected as renaming by design creates as many\r\nnon-unique names as possible.","timestamp":1265828899,"attachments":[]},{"id":10,"commenterId":-5060162230523776870,"content":"","timestamp":1268446071,"attachments":[]},{"id":11,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r139.","timestamp":1268779995,"attachments":[]}]}