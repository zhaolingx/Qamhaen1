{"id":116,"status":"Fixed","summary":"The side effects of function1||function2 are not calculated","labels":["Type-Enhancement","Priority-Medium"],"stars":4,"commentCount":8,"comments":[{"id":0,"commenterId":2150116745345684011,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. Compile (Math.sin||Math.cos)(0)\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\nEmpty output.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nThe closure-compiler web service at r114.\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\nAs a result of this issue goog.now() is considered to have side effects.","timestamp":1266937426,"attachments":[]},{"id":1,"commenterId":1948758734812428220,"content":"We can hard code this idiom and recognize it, however, in general side effect propagation is a bit harder.\r\n\r\nNick: I wonder if we can incorporate sideeffect into the type system? Have side \r\neffectfx free function be a subclass of function, then we can type Math.sin||Math.cos \r\nto be side effect free.","timestamp":1267214873,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"So this is where it helps to have a copy of the dragon book at your desk! ;)\r\n\r\nThis is a classic of a synthesized attribute. It\u0027s a simple matter of figuring out \r\nthe rules of the attribute grammar, and coding it up.\r\n\r\nThe type inference engine visits CFG nodes in this way: most of TypeInference.java is \r\njust synthesizing type attributes from child nodes. We\u0027d need a similar (albeit \r\nsimpler) inference engine for side effects.\r\n\r\nI don\u0027t think we\u0027d actually want to make this part of the type system, though. The \r\ntype lattice doesn\u0027t follow the same rules as the side-effect lattice. In particular,  \r\na side-effect-causing function may be a subtype of a non-side-effect-causing \r\nfunction, and vice-versa. It gets even messier when your try to take least common \r\nsupertype of a side-effect function and a non-side-effect function.","timestamp":1267215865,"attachments":[]},{"id":3,"commenterId":1948758734812428220,"content":"Synthesized attribute gets us this case but I am thinking of value propagation  like: var f \u003d Math.sin||Math.cos; var g \u003d f || foo.noSideEffectFunc; g();\r\n\r\nI think the Cartesian product of a sub lattice (all functions) and another lattice \r\n(side effects classification) should form another a lattice as well... But you are \r\nright that is messy.\r\n\r\nI feel we are not fully utilizing the power of our type inference system. It can give \r\nus a lot more solution besides JSDOC types. Instead of mixing new types in the JSDoc \r\ntypes, I wonder if we can extend it so it can take in custom type systems. Like the \r\nfunction side effect type system lattice.\r\n\r\nThoughts?\r\n","timestamp":1268428019,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"Andrew ran into this problem when he was writing type tightening. Specifically, you \r\nwant to do an analysis very similar to type inference, but you want to do it over a \r\ndifferent type lattice. I think he just gave up on trying to parameterize TypeInference \r\nand wrote a one-off inference engine in TightenTypes. It would be helpful to ask him \r\nwhy, and whether it\u0027s a good idea to write a separate type inference engine for \r\nattributes like this. Let\u0027s take that discussion off the bug entry and onto the public \r\nmailing list.","timestamp":1268438155,"attachments":[]},{"id":5,"commenterId":6398287913007780706,"content":"","timestamp":1269453938,"attachments":[]},{"id":6,"commenterId":6398287913007780706,"content":"I think there are two bugs:\r\n  1.  (Math.sin || Math.cos) in the call above is not a name or getprop expression.\r\n  2.  The definition finder doesn\u0027t handle aliases (which is what makes it unable to\r\nfind the definition of goog.now which is an alias to Date.now in addition to a\r\nreference to an anonymous function)\r\n\r\nThe first is fairly easy to fix:  when we encounter a call and what we are calling is\r\nan \"or\" or \"hook\" expression, consider the side effects of the left and right\r\nfunction names.\r\n\r\nThe second requires keeping track of aliases and expanding them to compute the set of\r\npossible functions.\r\n\r\nI\u0027ll take a stab at the first issue soon, the later will have to wait until I have\r\nmore time unless someone else wants to pick it up.","timestamp":1269460885,"attachments":[]},{"id":7,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r154.","timestamp":1269532709,"attachments":[]}]}