{"id":58,"status":"Fixed","summary":"Internet Explorer runtime error after compilation.","labels":["Type-Defect","Priority-Medium"],"stars":4,"commentCount":10,"comments":[{"id":0,"commenterId":7777975795178686730,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\nSee attached HTML file in IE6+ (does not work in IE8 unless Compatibility View is turned *on* for \r\nsome reason).\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\nExpected output is on the left-hand side of the page (it is generated by the raw source). Google \r\nClosure\u0027s output is on the right-hand side of the page.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nI downloaded compiler-latest.zip today (Nov. 24, 2009, ~ 12:00 PM EST)\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\nThere is a variable called \u0026quot;threshold\u0026quot; which is used to generate an array of arrays in the attached \r\nHTML file. If it is a small number, IE seems to pass arrays into the sort method (sorting an array \r\nof arrays) by value like all other browsers do. But when threshold is large enough (on my \r\nmachine that happens around 250) IE starts passing the arrays in by value. Google Closure \r\ncompiler has changed my original source from making local copies to modifying the arguments \r\nbeing passed into the sort comparator ... but as a result of this IE behavior the Closure compiled \r\ncode breaks.","timestamp":1259084060,"attachments":[{"id":2881320297632167502,"fileName":"googleclosuretest.html","fileSize":1695}]},{"id":1,"commenterId":7777975795178686730,"content":"So after looking into this some more, I\u0027ve learned that arrays are always passed by reference, but that only \r\nmeans you can change attributes and individual items in an array. So for example:\r\n\r\nvar a \u003d [1, 2, 3, 4];\r\nvar f \u003d function(x){x \u003d null;};\r\nf(a);\r\n// the value of a will remain [1, 2, 3, 4]\r\n// but if instead:\r\nvar g \u003d function(x){x[0] \u003d null;};\r\ng(a);\r\n// the value of a is now [null, 2, 3, 4]\r\n\r\nIn the attached example, the Google Closure compiled version is akin to the function f above, which means \r\nthat the value of the arrays should *not* be changing. In IE, if the threshold is set high enough, however, they \r\ndo indeed change. So the original report may not be accurate, but this is a real issue.","timestamp":1259105000,"attachments":[]},{"id":2,"commenterId":-5060162230523776870,"content":"There is definitely something odd occurring here, running it under the debugger with \r\nIE7, it reports \"Number expected\".\r\n\r\nAdding a \"Debug.writeln(\"blah\")\" in the \"right\" spot and the problem goes away:\r\n    var g_test\u003dfunction(f,c){\r\n        var g\u003d[\"aaaaaa\",\"bbbbbb\"];\r\n        c\u003d(function(a,b){\r\n          for(var d\u003d[],e\u003d0;e\u003ca;e+\u003d1)\r\n            d.push(b);\r\n          return d})(c,g);\r\n        c.sort(function(a,b){\r\n          a\u003d(a[1].toUpperCase());\r\n          Debug.writeln(\"Blah\");\r\n          b\u003d(b[1].toUpperCase());\r\n          return a\u003cb?-1:Number(a\u003eb)});\r\n        f.innerHTML\u003dtypeof c[0]+\"\u003cbr\u003e\"+c.join(\" --- \")\r\n     };","timestamp":1259115134,"attachments":[]},{"id":3,"commenterId":-5060162230523776870,"content":"Update summary to something more directly related.","timestamp":1259201167,"attachments":[]},{"id":4,"commenterId":-5917403417089514098,"content":"","timestamp":1259707252,"attachments":[]},{"id":5,"commenterId":4690000788079557483,"content":"I did some research on this issue, documented here:\r\nhttp://www.zachleat.com/web/2010/02/24/array-sort/","timestamp":1267068145,"attachments":[]},{"id":6,"commenterId":4690000788079557483,"content":"If you don\u0027t want to wait for the compiler fix, just declare the variables outside of \r\nthe sort, and the compiler won\u0027t optimize and reuse them:\r\n\r\nvar a, b;\r\nc.sort(function(a1,b1){\r\n          a\u003d(a1[1].toUpperCase());\r\n          Debug.writeln(\"Blah\");\r\n          b\u003d(b1[1].toUpperCase());\r\n          return a\u003cb?-1:Number(a\u003eb)});","timestamp":1267106534,"attachments":[]},{"id":7,"commenterId":-7699928860083865744,"content":"wow. that\u0027s a nice find. i can\u0027t imagine what IE could possibly be doing under the \r\ncovers that would lead to this problem.\r\n\r\nOne possible fix would be to never coalesce the arguments of a function. \r\n\r\nAnother possible fix would be to \"fix\" Array.prototype.sort:\r\n\r\nvar oldArraySort \u003d Array.prototype.sort;\r\nArray.prototype.sort \u003d function(f) {\r\n  return oldArraySort.call(this, function(x, y) {\r\n    return f.call(this, x, y);\r\n  });\r\n};\r\n\r\nNeither is really satisfying.\r\n\r\nAlan, what do you think?","timestamp":1267151828,"attachments":[]},{"id":8,"commenterId":5241484814466034803,"content":"Perhaps a @nocoalesce JSDoc tag?","timestamp":1267920870,"attachments":[]},{"id":9,"commenterId":-7699928860083865744,"content":"fixed by r171","timestamp":1270537715,"attachments":[]}]}