{"id":205,"status":"Fixed","summary":"Add option to turn off string escaping","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":18,"comments":[{"id":0,"commenterId":-8446567482284179465,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n\r\n1. I\u0027m having large files with strings (patterns for hyphenation, see http://code.google.com/p/hyphenator/) and no-ASCII-characters.\r\n2. Minifying with closure compiler makes them bigger\r\n    ru.js (orig): 41\u0027216 Bytes\r\n    ru.js (orig, gzip): 17\u0027124 Bytes\r\n    ru.js (mini): 110\u0027770 Bytes\r\n    ru.js (mini, gzip): 18\u0027860 Bytes\r\n\r\nWhat is the expected output?\r\nI\u0027d like to be able to turn OFF the string escaping mechanism.\r\n\r\nThanks","timestamp":1280255743,"attachments":[]},{"id":1,"commenterId":-5060162230523776870,"content":"Can you be more specific? What types of strings are being escaped that do not need to be?  Can you provide a small sample? As this show the compiled results as 20.26KB (7.62KB gzipped). Which is significantly smaller than what you are showing.\r\n\r\nhttp://closure-compiler.appspot.com/home\r\n\r\n// \u003d\u003dClosureCompiler\u003d\u003d\r\n// @compilation_level SIMPLE_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @code_url http://hyphenator.googlecode.com/svn/trunk/Hyphenator.js\r\n// \u003d\u003d/ClosureCompiler\u003d\u003d\r\n","timestamp":1280260923,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"I\u0027m guessing that you just want non-ascii characters to be encoded in a compact way.\r\n\r\nAre you looking for the --charset flag?","timestamp":1280262696,"attachments":[]},{"id":3,"commenterId":-8446567482284179465,"content":"Thanks for your quick responses.\r\n\r\n@concavelenz\r\nI meant the pattern files: http://hyphenator.googlecode.com/svn/trunk/patterns/ru.js for example. Unicode characters are escaped: Ð± becomes \\u0431\r\nThat\u0027s not necessary (at least in my case).\r\n\r\n@Nicholas.J.Santos\r\n--charset is for input files. I\u0027m looking for something similar for the output.","timestamp":1280271080,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"i think --charset also sets the charset for output files? \r\n\r\nit looks like it funnels UTF_8 to ascii, but I don\u0027t know why. Robert is our encoding expert, but he is on vacation. :\\","timestamp":1280283048,"attachments":[]},{"id":5,"commenterId":436477103612417078,"content":"For the large files with strings, you might specify a charset that compresses better for your files. You might choose a different charset encoding for input and output - either UTF_8 if that\u0027s what you\u0027re starting with, or one of the Russian charsets (if that\u0027s your contents, as suggested by the \"ru.js\" name).  Note that the --charset command line option specifies a single choice for input and output, so you may need to change the charset of your source file.\r\n\r\nHistorically, the Closure Compiler has accepted UTF-8 encoded input files, and has output 7 bit US-ASCII\r\n(with explicit escaping of Unicode characters.)  We generate US-ASCII because we\u0027ve hit bugs over the years\r\nwhere some proxy servers and firewalls would either corrupt our JavaScript or wouldn\u0027t pass the JavaScript\r\nfiles through.  Within Google, we traded off the increased file size for ensuring our applications ran in as\r\nmany environments as possible.  I\u0027d also guess that literal strings are a very small part of our JavaScript source\r\ncode, so escaping Unicode characters hasn\u0027t been considered much of a size gain.\r\n","timestamp":1280861355,"attachments":[]},{"id":6,"commenterId":-5060162230523776870,"content":"@mathiasnater\r\nWere you attempting to use UTF-8 as an output charset? Or did you have another issue?","timestamp":1280936278,"attachments":[]},{"id":7,"commenterId":-8446567482284179465,"content":"@bowdidge\r\nI prefer to use UTF.\r\nThanks for the explanation. It\u0027s good to know why.\r\nNevertheless it would be great to be able to turn this feature off.\r\n\r\n@concavelenz\r\nNo both files, input and output are UTF-8 encoded. It\u0027s not an encoding issue. My problem is that non ascii strings are escaped, thus the file size (in the pattern files with several KB of strings) is bigger even after gzipping. It would be great to be able to turn this feature off.\r\n","timestamp":1280947726,"attachments":[]},{"id":8,"commenterId":-7699928860083865744,"content":"","timestamp":1280955882,"attachments":[]},{"id":9,"commenterId":1328304962299559429,"content":"This issue was closed by revision r344.","timestamp":1281070242,"attachments":[]},{"id":10,"commenterId":-7699928860083865744,"content":"you should now be able to use the --charset \"UTF-8\" flag to encode your files properly.","timestamp":1281070349,"attachments":[]},{"id":11,"commenterId":-8446567482284179465,"content":"Hi\r\n\r\nWhile it\u0027s great to set the encoding of the output file (thanks for that;-), my primary issue (\u0027Add option to turn off string escaping\u0027) isn\u0027t fixed.\r\nStrings (or chars) that aren\u0027t ascii are still escaped and that\u0027s not necessary if we are in utf-8.\r\n\r\nOr am I missing something?","timestamp":1281115679,"attachments":[]},{"id":12,"commenterId":-7699928860083865744,"content":"i\u0027ll look into it some more tomorrow.","timestamp":1281411172,"attachments":[]},{"id":13,"commenterId":-7699928860083865744,"content":"Hmmm...it looks fixed to me. Did you actually checkout the compiler at head, rebuild it, and recompile with the command\r\njava -jar build/compiler.jar --js ru.js --charset \"UTF-8\"\r\n\r\n?\r\n\r\nWhen I run that command, the strings are encoded correctly and the file size comes out to ~41kb.","timestamp":1281468888,"attachments":[]},{"id":14,"commenterId":1907101986124555394,"content":"Is there a way to get UTF output from the Closure Compiler Service? When using the REST API I\u0027m seeing all the Unicode characters being explicitly escaped.","timestamp":1286217685,"attachments":[]},{"id":15,"commenterId":-6571671202278813382,"content":"This is not fixed.\r\nOn the Closure Compiler Service and API, strings are always escaped into ascii characters and charset parameter is omitted.\r\nThis parameter is not documented anywhere.","timestamp":1329489948,"attachments":[]},{"id":16,"commenterId":7730063706161723473,"content":"It looks like there\u0027s an option being set on the command line that isn\u0027t getting passed through in all cases.  It looks like this isn\u0027t fixed when calling from ant task either.\r\n","timestamp":1391212748,"attachments":[]},{"id":17,"commenterId":-7699928860083865744,"content":"We do not plan to add a charset option to the webservice API.\r\n\r\nIf you are having problems with the command-line API, then please file a bug with specific details about how you are invoking the compiler, what you see, and what you expect to see. we\u0027d be happy to look into it.","timestamp":1391218231,"attachments":[]}]}