{"id":688,"status":"Fixed","summary":"@const dumps type cast information","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":6,"comments":[{"id":0,"commenterId":-8586464776077098753,"content":"The following code compiles fine:\r\n\r\n/**\r\n* Class defining an interface with two numbers.\r\n* @interface\r\n*/\r\nfunction TwoNumbers() {}\r\n\r\n/** @type number */\r\nTwoNumbers.prototype.first;\r\n\r\n/** @type number */\r\nTwoNumbers.prototype.second;\r\n\r\nvar SOME_DEFAULT \u003d\r\n  /** @type {TwoNumbers} */ ({first: 1, second: 2});\r\n\r\n/**\r\n * Class with a two number member.\r\n * @constructor\r\n */\r\nfunction HasTwoNumbers() {\r\n  /** @type {TwoNumbers} */\r\n  this.twoNumbers \u003d this.getTwoNumbers();\r\n}\r\n\r\n/**\r\n * Get the default two numbers.\r\n * @return {TwoNumbers}\r\n */\r\nHasTwoNumbers.prototype.getTwoNumbers \u003d function() {\r\n  return SOME_DEFAULT;\r\n};\r\n\r\nNow realizing that SOME_DEFAULTS is actually a preset constant which should not change I would like to say for that line (just adding an @const)\r\n\r\n/** @const */ var SOME_DEFAULT \u003d\r\n  /** @type {TwoNumbers} */ ({first: 1, second: 2});\r\n\r\nHowever that starts throwing warnings as adding the @const makes the compiler dump the type. (Does the value get inlined without the typecast?)\r\n\r\nExpected:\r\nCompiles fine.\r\n\r\nError can be reproduced on:\r\nhttp://closure-compiler.appspot.com/home\r\ncopy-past the attached file in there, it throws a warning and does not compile.","timestamp":1332380159,"attachments":[{"id":6880000000,"fileName":"1","fileSize":582}]},{"id":1,"commenterId":-5060162230523776870,"content":"1) I assume you are using ADVANCED mode\r\n2) It does compile, there is just nothing left after dead code removal.\r\n3) It produces two warnings (not errors):\r\n\r\nJSC_TYPE_MISMATCH: initializing variable\r\nfound   : (TwoNumbers|null)\r\nrequired: {first: number, second: number} at line 15 character 27\r\n/** @type {TwoNumbers} */ ({first: 1, second: 2});\r\n                           ^\r\nJSC_TYPE_MISMATCH: inconsistent return type\r\nfound   : {first: number, second: number}\r\nrequired: (TwoNumbers|null) at line 31 character 7\r\nreturn SOME_DEFAULT;\r\n\r\nI assume it is the last that you are asking about?","timestamp":1332431320,"attachments":[]},{"id":2,"commenterId":-8586464776077098753,"content":"1) Yes advance mode\r\n2 \u0026 3) that is correct, however our project compiles in strict mode (this is just a simplified version) so for our project this will stop compilation.\r\n\r\nBoth of them right? One is from A -\u003e B and the other form B -\u003e A while it is an A used as A, so it should be all fine, like it is without the @const\r\n\r\nOr am I missing something?","timestamp":1332458564,"attachments":[]},{"id":3,"commenterId":-5060162230523776870,"content":"Thanks for the clarification.  ","timestamp":1332465433,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"","timestamp":1341707948,"attachments":[]},{"id":5,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r2076.","timestamp":1341869364,"attachments":[]}]}