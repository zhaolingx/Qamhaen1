{"id":1056,"status":"Fixed","summary":"initial type of variable wrong when initialize in a \"var\" statement with type declaration.","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":7,"comments":[{"id":0,"commenterId":-4776102130401072453,"content":"The following code doesn\u0027t give any warning even though it is an obvious bug:\r\n\r\n-------------\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d---------\r\n/**\r\n * @constructor\r\n */\r\nfunction MyClass() {\r\n  this.value \u003d 1;\r\n}\r\n\r\nMyClass.prototype.show \u003d function() {\r\n  window.console.log(this.value)\r\n}\r\n\r\n/**\r\n * @type {MyClass}\r\n */\r\nvar x \u003d null;\r\nx.show();\r\n-------------\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d---------\r\n\r\nHowever, if you remove the @type from the var declaration, then closure realizes the problem and warns about x being null rather than an Object.\r\n\r\nIn any case, since x \u0026quot;can be null\u0026quot;, closure should warn about a potential null pointer error, and suggest to guard against the null value, like it does if we try to pass x as an argument where a non-null type is expected. That could be an optional behavior protected behind a flag, but it would definitely help catch lots of errors and write safer code.\r\n\r\nI am using the latest closure version available to date, on Ubuntu 13.04, on an amd64 machine.\r\n","timestamp":1375264337,"attachments":[]},{"id":1,"commenterId":4865484112040790759,"content":"We don\u0027t plan to warn about potential null pointers wherever there is a nullable object type because it will give numerous spurious warnings.\r\n\r\nIn your example, the reason there is no warning is because when the type of the variable is declared, the compiler always treats it as having that type, even if it can have a subtype. (We may revisit this decision in the future, but there is no specific plan at the moment.)","timestamp":1375287699,"attachments":[]},{"id":2,"commenterId":-5060162230523776870,"content":"This isn\u0027t quite right.\r\n1) x isn\u0027t always consider \"MyClass|null\", while assignments are restricted to subtypes of MyClass or null, the actual value type in the flow are known.\r\n\r\n2) While it is true that in general we don\u0027t want to warn about potential null values (there are too many false positives), we can and do warn about values that can only be null:\r\n\r\n/** @type {Object} */\r\nvar x;\r\nx \u003d null;\r\nx.call();\r\n\r\nproduces:\r\n\r\nJSC_TYPE_MISMATCH: No properties on this expression\r\nfound   : null\r\nrequired: Object at line 7 character 0\r\nx.call();\r\n\r\nAs has been brought up before, initial type of x in the example is currently wrong, it should be declared to be \"MyClass|null\" but its initial value at declaration should be \"null\" in the flow.\r\n\r\n","timestamp":1375557273,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"I think the reason we did it this way is because there\u0027s a more general problem. For any expression\r\n\r\n/** @type {T} */\r\nvar x \u003d getT();\r\n\r\nThere are values of T where it makes sense to trust the type annotation, and there are values of T where it makes sense to trust the return type of getT. A classic example is where T is Array.\u003cElement\u003e and getT is Array.\u003c?\u003e\r\n\r\nI can probably suggest a fix for this that will get most of the obvious cases, but I don\u0027t know how many new warnings it will raise.","timestamp":1383413504,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"I posted a fix here:\r\nhttps://codereview.appspot.com/21440043/\r\n\r\nThere are some comments in there about why this is tricky. There\u0027s a dumb fix that will catch the most egregious problems, and a commented-out idealistic fix.","timestamp":1383516038,"attachments":[]},{"id":5,"commenterId":-7699928860083865744,"content":"This issue was closed by revision aeed47f424d9.","timestamp":1384841779,"attachments":[]},{"id":6,"commenterId":-7699928860083865744,"content":"This issue was closed by revision aeed47f424d9.","timestamp":1389758015,"attachments":[]}]}