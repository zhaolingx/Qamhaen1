{"id":769,"status":"Fixed","summary":"Type refining of \u0027this\u0027 raises IllegalArgumentException","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":3,"comments":[{"id":0,"commenterId":592303861180311351,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. goog.isFunction(this) or goog.isObject(this) or goog.isNull(this) etc.\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n\r\nExpected: normal compilation, checking the type of this\r\nActual output:\r\n\r\n23: java.lang.IllegalArgumentException: Node cannot be refined. \r\nTHIS 1 [source_file: Input_0] : global this\r\n\r\n\tat com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.declareNameInScope(ChainableReverseAbstractInterpreter.java:172)\r\n\tat com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictParameter(ClosureReverseAbstractInterpreter.java:240)\r\n\tat com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome(ClosureReverseAbstractInterpreter.java:221)\r\n\tat com.google.javascript.jscomp.TypeInference.branchedFlowThrough(TypeInference.java:239)\r\n\tat com.google.javascript.jscomp.TypeInference.branchedFlowThrough(TypeInference.java:59)\r\n\tat com.google.javascript.jscomp.DataFlowAnalysis$BranchedForwardDataFlowAnalysis.flow(DataFlowAnalysis.java:448)\r\n\tat com.google.javascript.jscomp.DataFlowAnalysis.analyze(DataFlowAnalysis.java:213)\r\n\tat com.google.javascript.jscomp.DataFlowAnalysis.analyze(DataFlowAnalysis.java:181)\r\n\tat com.google.javascript.jscomp.TypeInferencePass.inferTypes(TypeInferencePass.java:90)\r\n\tat com.google.javascript.jscomp.TypeInferencePass$TypeInferringCallback.enterScope(TypeInferencePass.java:106)\r\n\tat com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:581)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:345)\r\n\tat com.google.javascript.jscomp.TypeInferencePass.inferTypes(TypeInferencePass.java:81)\r\n\tat com.google.javascript.jscomp.TypeInferencePass.process(TypeInferencePass.java:74)\r\n\tat com.google.javascript.jscomp.DefaultPassConfig$24$1.process(DefaultPassConfig.java:1119)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:296)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:273)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:187)\r\n\tat com.google.javascript.jscomp.Compiler.check(Compiler.java:768)\r\n\tat com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:683)\r\n\tat com.google.javascript.jscomp.Compiler.access$000(Compiler.java:79)\r\n\tat com.google.javascript.jscomp.Compiler$1.call(Compiler.java:586)\r\n\tat com.google.javascript.jscomp.Compiler$1.call(Compiler.java:583)\r\n\tat com.google.javascript.jscomp.Compiler$2.run(Compiler.java:628)\r\n\tat com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:651)\r\n\tat com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:601)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:583)\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\n\r\nAny version (local and http://closure-compiler.appspot.com/).\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\n\r\nA workaround is to assign \u0027this\u0027 to a variable. \u0026quot;var a\u003dthis;goog.isNull(a)\u0026quot; works.","timestamp":1341226938,"attachments":[]},{"id":1,"commenterId":-7699928860083865744,"content":"","timestamp":1341275701,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r2072.","timestamp":1341412607,"attachments":[]}]}