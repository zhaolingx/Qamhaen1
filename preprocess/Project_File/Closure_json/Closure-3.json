{"id":864,"status":"Fixed","summary":"optimization fails with variable in catch clause","labels":["Type-Defect","Priority-High"],"stars":0,"commentCount":4,"comments":[{"id":0,"commenterId":-4119365221236112193,"content":"Enter the following in the closure service:\r\n\r\nfunction getStack() {\r\n  var getErrorObject \u003d function() {\r\n    try {\r\n      throw Error(\u0026quot;\u0026quot;);\r\n    } catch(err) {\r\n      return err;\r\n    }\r\n  };\r\n  return getErrorObject().stack;\r\n}\r\nwindow[\u0027getStackTrace\u0027]\u003dgetStack;\r\n\r\nUse Optimization \u003d Simple. Note the following result:\r\n\r\nfunction getStack() \r\n{ \r\n  try \r\n  { \r\n    throw Error(\u0026quot;\u0026quot;); \r\n  }\r\n  catch(a) \r\n  { \r\n  } \r\n  return a.stack \r\n} \r\nwindow.getStackTrace \u003d getStack;\r\n\r\nThe scope of the variable a is limited to the catch clause, but the compiler references it illegally as the return value of the inlined function.\r\n","timestamp":1353373431,"attachments":[]},{"id":1,"commenterId":-5060162230523776870,"content":"Thanks for the report and the reduced test case.  It looks like the \"flow sensitive variable inliner\" is causing this problem.","timestamp":1353390218,"attachments":[]},{"id":2,"commenterId":-5060162230523776870,"content":"I have a fix for this.","timestamp":1355809733,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r2415.","timestamp":1356045807,"attachments":[]}]}