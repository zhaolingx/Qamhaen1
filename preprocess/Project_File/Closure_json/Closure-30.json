{"id":698,"status":"Fixed","summary":"Combining temporary strings are over-optimized in advanced build","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":13,"comments":[{"id":0,"commenterId":659813697836453438,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. This bug only manifests itself in large code bases. How large, and what the specifics are, I haven\u0027t yet worked out, since the output differs. But the principle code is:\r\n\r\nsgxColorRGBA.prototype.asHex \u003d function() {\r\n\tvar hexString \u003d \u0026quot;\u0026quot;;\r\n\t\r\n\tstr \u003d (sgxFloor(this.r*255)).toString(16);\r\n\tif (str.length \u0026lt; 2) { str \u003d \u0026quot;0\u0026quot;+str; }\r\n\thexString +\u003d str;\r\n\r\n\tstr \u003d (sgxFloor(this.g*255)).toString(16);\r\n\tif (str.length \u0026lt; 2) { str \u003d \u0026quot;0\u0026quot;+str; }\r\n\thexString +\u003d str;\r\n\r\n\tstr \u003d (sgxFloor(this.b*255)).toString(16);\r\n\tif (str.length \u0026lt; 2) { str \u003d \u0026quot;0\u0026quot;+str; }\r\n\thexString +\u003d str;\r\n\r\n\tstr \u003d (sgxFloor(this.a*255)).toString(16);\r\n\tif (str.length \u0026lt; 2) { str \u003d \u0026quot;0\u0026quot;+str; }\r\n\thexString +\u003d str;\r\n\r\n\treturn hexString;\r\n}\r\n\r\nNote that \u0027str\u0027 is not declared as var.\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\nI see this:\r\nsgxColorRGBA.prototype.pb \u003d function() {\r\n  str \u003d A(255 * this.A).toString(16);\r\n  2 \u0026gt; str.length \u0026amp;\u0026amp; (str \u003d \u0026quot;0\u0026quot; + str);\r\n  str \u003d A(255 * this.w).toString(16);\r\n  2 \u0026gt; str.length \u0026amp;\u0026amp; (str \u003d \u0026quot;0\u0026quot; + str);\r\n  str \u003d A(255 * this.s).toString(16);\r\n  2 \u0026gt; str.length \u0026amp;\u0026amp; (str \u003d \u0026quot;0\u0026quot; + str);\r\n  str \u003d A(255 * this.r).toString(16);\r\n  2 \u0026gt; str.length \u0026amp;\u0026amp; (str \u003d \u0026quot;0\u0026quot; + str);\r\n  return\u0026quot;\u0026quot; + str + str + str + str\r\n};\r\n\r\nObviously, repeatedly adding \u0027str\u0027 is broken in the final line, compared to the original. So whatever is aggregating the result is seeing a temporary \u0027str\u0027 reference and combining it, I guess. If \u0027str\u0027 is declared as var, the problem goes away.\r\n\r\nI\u0027d expect a warning, at least.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\n\r\nLive at http://closure-compiler.appspot.com\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\n\r\nAs a stand-alone method, both \u0027var str\u0027 and \u0027str\u0027 works. It\u0027s only when the project hits a certain (undetermined) size that it fails.\r\n\r\n","timestamp":1333149475,"attachments":[]},{"id":1,"commenterId":-7699928860083865744,"content":"I entered your code into the compiler, but was not able to reproduce the issue. are you sure that\u0027s the code you\u0027re using?","timestamp":1333220407,"attachments":[]},{"id":2,"commenterId":659813697836453438,"content":"It is the same code, but as I say in the comments section - it only happens when the project hits a certain (undetermined) size that it fails. I haven\u0027t determined how much (of my current 6KLOC project) I need to include, to repro.\r\n\r\nIssue 699 appears to have similar traits and might be connected.","timestamp":1333221223,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"Honest question: what would you like us to do with this bug?\r\n\r\nSuppose we fixed a bug in the compiler tomorrow that looked similar. We would have no way of testing if this is the same bug, because we currently don\u0027t have enough information to reproduce the issue and verify it. So it\u0027s unclear to me what you would like us to do.\r\n\r\nI\u0027m confused by your reference to issue 699, which is expected behavior and seems totally unrelated.","timestamp":1333224675,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"(would you be comfortable sending me better repro steps over email if i agreed not to share the original code with anyone?)","timestamp":1333228548,"attachments":[]},{"id":5,"commenterId":659813697836453438,"content":"Two-fold answer: Firstly as a note that a warning should probably be visible, that if you re-use a string variable  - without declaring it as var - its result is liable to get inlined and optimised out.\r\n\r\nSecondly, as a note for storing in the back of ones mind, so that anyone working on the collapsing strings routines might spot something in the code base that\u0027s wrong. (I\u0027m following the bug, so would be able to re-test at that time, since I can\u0027t share the whole code base.)","timestamp":1333290013,"attachments":[]},{"id":6,"commenterId":659813697836453438,"content":"p.s. apologies for the 699 ref. I saw a collapsed string and jumped to the wrong conclusion.","timestamp":1333290104,"attachments":[]},{"id":7,"commenterId":659813697836453438,"content":"So I wrote those comments last night, but hadn\u0027t hit send :( I\u0027ve since had a chance to prune down 6KLOC to 45. As below:\r\n\r\n// \u003d\u003dClosureCompiler\u003d\u003d\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @formatting pretty_print\r\n// \u003d\u003d/ClosureCompiler\u003d\u003d\r\n\r\n/**\r\n* @constructor\r\n*/\r\nsgxColorRGBA \u003d function(r,g,b,a) {\r\n\tthis.r \u003d (r\u003d\u003dundefined?1:r);\r\n\tthis.g \u003d (g\u003d\u003dundefined?1:g);\r\n\tthis.b \u003d (b\u003d\u003dundefined?1:b);\r\n\tthis.a \u003d (a\u003d\u003dundefined?1:a);\r\n}\r\n\r\n\r\nsgxColorRGBA.prototype.asHex \u003d function() {\r\n\tvar hexString \u003d \"\";\r\n\t\r\n\tstr \u003d (Math.floor(this.r*255)).toString(16);\r\n\tif (str.length \u003c 2) { str \u003d \"0\"+str; }\r\n\thexString +\u003d str;\r\n\r\n\tstr \u003d (Math.floor(this.g*255)).toString(16);\r\n\tif (str.length \u003c 2) { str \u003d \"0\"+str; }\r\n\thexString +\u003d str;\r\n\r\n\tstr \u003d (Math.floor(this.b*255)).toString(16);\r\n\tif (str.length \u003c 2) { str \u003d \"0\"+str; }\r\n\thexString +\u003d str;\r\n\r\n\tstr \u003d (Math.floor(this.a*255)).toString(16);\r\n\tif (str.length \u003c 2) { str \u003d \"0\"+str; }\r\n\thexString +\u003d str;\r\n\r\n\treturn hexString;\r\n}\r\n\r\n\r\nvar col \u003d new sgxColorRGBA(0.2,0.3,0.4,1);\r\nalert(col.asHex());\r\n\r\nvar col2 \u003d new sgxColorRGBA(0.3,0.4,0.5,1);\r\nalert(col2.asHex());\r\n\r\n\r\nIt\u0027s the second sgxColorRGBA invocation that triggers the bug. With only one, the crux is:\r\n\r\nstr \u003d Math.floor(255 * b.d).toString(16);\r\n2 \u003e str.length \u0026\u0026 (str \u003d \"0\" + str);\r\nc +\u003d str;\r\n\r\nWith both, you get:\r\n\r\n  str \u003d Math.floor(255 * a.d).toString(16);\r\n  2 \u003e str.length \u0026\u0026 (str \u003d \"0\" + str);\r\n[note no c +\u003d str; here]\r\n\r\nsgxFloor is/was a direct call to Math.floor and had no change on the results.\r\n\r\nHope this is better :)\r\n\r\n","timestamp":1333290294,"attachments":[]},{"id":8,"commenterId":1948758734812428220,"content":"I suspect it is either the variable inliner or the variable name coalesceing.","timestamp":1333432353,"attachments":[]},{"id":9,"commenterId":-215138502632663007,"content":"The problem goes away if you declare the str variable locally:\r\n\r\n*var* str \u003d (Math.floor(this.r*255)).toString(16);\r\n\r\nMy guess is within Google, every undeclared string flags a compiler error. Some of passes assumes that is always the case.\r\n\r\nI am doing a binary search to see who\u0027s at fault but this should work you around the problem for now.","timestamp":1333495735,"attachments":[]},{"id":10,"commenterId":-7699928860083865744,"content":"@alan- feel free to assign to me if you\u0027re swamped with too much work right now.","timestamp":1334254754,"attachments":[]},{"id":11,"commenterId":-7699928860083865744,"content":"","timestamp":1334260812,"attachments":[]},{"id":12,"commenterId":1328304962299559429,"content":"This issue was closed by revision r1902.","timestamp":1334687742,"attachments":[]}]}