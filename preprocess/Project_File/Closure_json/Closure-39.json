{"id":643,"status":"Fixed","summary":"externExport with @typedef can generate invalid externs","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":11,"comments":[{"id":0,"commenterId":6623762857731985997,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. Create a file that has a @typedef and code referencing the type def above and below the typedef declaration.\r\n2. Run the closure compiler and grab the externExport string stored on the last result for review.\r\n3. I have attached both source and output files displaying the issue.\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n\r\nThe code above the @typedef references the aliased name of the @typedef as expected however the code below the @typedef tries embedding the body of the @typedef and ends up truncating it if the length is too long with a \u0026quot;...\u0026quot;. This throws bad type errors when compiling against this extern. What is odd is this only seems to be the case when the parameter with the type is optional. When neither are optional it embeds the types, which is not a big deal, except when types are long; they get truncated and throw errors.\r\n\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\n\r\nplovr built from revision 3103:d6db24beeb7f\r\nRevision numbers for embedded Closure Tools:\r\nClosure Library:    1374\r\nClosure Compiler:   1559\r\nClosure Templates:    23\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\n","timestamp":1326993881,"attachments":[{"id":6430000000,"fileName":"Closure Issue Source and Output.zip","fileSize":1233}]},{"id":1,"commenterId":-5060162230523776870,"content":"It doesn\u0027t look like the \"optional\" source and \"optional\" output examples match.","timestamp":1326998819,"attachments":[]},{"id":2,"commenterId":6623762857731985997,"content":"Doh! Uploaded the wrong file, I\u0027m sorry. Here is a fix. It\u0027s essentially the same as the non-optional but with the ? prefix. Thank you so much for reviewing this.","timestamp":1327007461,"attachments":[{"id":6430002000,"fileName":"optional.js","fileSize":378}]},{"id":3,"commenterId":6623762857731985997,"content":"Any update or reviews on this issue?","timestamp":1327096648,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"Thanks for reporting the issue. I don\u0027t know when someone will have time to fix it.","timestamp":1327263489,"attachments":[]},{"id":5,"commenterId":6623762857731985997,"content":"I have almost no Java experience but I\u0027m going to attempt to fix it. (It\u0027s quite important to our project.) Any pointers as to where to even start or what the problem might be?","timestamp":1327351975,"attachments":[]},{"id":6,"commenterId":-7699928860083865744,"content":"The best place to start would be to write a test in here:\r\nhttp://code.google.com/p/closure-compiler/source/browse/trunk/test/com/google/javascript/jscomp/ExternExportsPassTest.java\r\n\r\nyou can run the test at the command-line by running\r\nant test -Dtest.class\u003dExternExportsPassTest.java\r\nor with your favorite IDE.\r\n\r\nIf I had to guess, I\u0027d say that the problem is TypedCodeGenerator.java just appends the JSType to a string, which invokes its toString method\r\nhttp://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/TypedCodeGenerator.java\r\n\r\nbut toString() is meant for warning information. You really want some other serialization format (toTypeString?) that will work in generated code.\r\n\r\nThere may be issues trying to come up with a string serialization of the type that will work. And there may be other problems. But that\u0027s where I\u0027d start.","timestamp":1327358176,"attachments":[]},{"id":7,"commenterId":6623762857731985997,"content":"Thank you kind sir!","timestamp":1327358298,"attachments":[]},{"id":8,"commenterId":6623762857731985997,"content":"Turns out I\u0027m incompetent. I hope you guys can fix this soon for the time being I will probably work with a parser instead.","timestamp":1327438892,"attachments":[]},{"id":9,"commenterId":6623762857731985997,"content":"What JSType sub class do @typedefs become?","timestamp":1327529165,"attachments":[]},{"id":10,"commenterId":1328304962299559429,"content":"This issue was closed by revision r1761.","timestamp":1328314141,"attachments":[]}]}