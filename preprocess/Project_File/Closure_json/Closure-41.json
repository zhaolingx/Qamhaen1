{"id":368,"status":"Fixed","summary":"In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures.","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":6,"comments":[{"id":0,"commenterId":-2020703049423688535,"content":"In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures. The following code only warns in the one instance noted in the comment, whereas I would expect it to complain about the declarations of both Bar.prototype.add and Bar.prototype.sub, as they claim @inheritDoc, but have seemingly different signatures from that of their superclass methods.\r\n\r\nIt would be helpful to have such a warning so that when you change the signature of a superclass method, you can run the Compiler to trigger warnings and find all of the other signatures that you need to update.\r\n\r\nRun the following:\r\n\r\n// \u003d\u003dClosureCompiler\u003d\u003d\r\n// @compilation_level ADVANCED_OPTIMIZATIONS\r\n// @output_file_name default.js\r\n// @use_closure_library true\r\n// \u003d\u003d/ClosureCompiler\u003d\u003d\r\n\r\ngoog.provide(\u0027Foo\u0027);\r\ngoog.provide(\u0027Bar\u0027);\r\n\r\n\r\n/** @constructor */\r\nFoo \u003d function() {};\r\n\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number}\r\n */\r\nFoo.prototype.add \u003d function(a, b) {\r\n  return a + b;\r\n};\r\n\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number}\r\n */\r\nFoo.prototype.sub \u003d goog.abstractMethod;\r\n\r\n\r\n/**\r\n * @constructor\r\n * @extends {Foo}\r\n */\r\nBar \u003d function() {\r\n  goog.base(this);\r\n};\r\ngoog.inherits(Bar, Foo);\r\n\r\n\r\n/** @inheritDoc */\r\nBar.prototype.add \u003d function(one) {\r\n  return one;\r\n};\r\n\r\n\r\n/** @inheritDoc */\r\nBar.prototype.sub \u003d function(one) {\r\n  return one;\r\n};\r\n\r\n\r\nvar foo \u003d /** @type {Foo} */ (new Bar());\r\nalert(foo.add(3, 4));\r\n\r\nvar bar \u003d new Bar();\r\n// THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT\r\nalert(bar.add(3, 4));\r\n","timestamp":1299105393,"attachments":[]},{"id":1,"commenterId":-5205599355437290890,"content":"","timestamp":1305903795,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"i think they do have compatible signatures? e.g., Bar.prototype.add can take 2 arguments and it will work just fine.\r\n\r\nI think what we really need to do is infer dynamically that Bar.prototype.add may be called with 1 argument or 2 arguments, and the second argument is optional ALL {*\u003d}. That would be completely consistent in our type system, i think?","timestamp":1305924771,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"Yi and I were also talking about the secondary question of whether there should be a warning for the overriding methods. I\u0027ve said \u0027no\u0027 in the past, because there are many cases where this feature is useful. e.g., if you have an event handler that doesn\u0027t use the event object, it doesn\u0027t really make sense to declare a variable for it.\r\n\r\nWe\u0027ve talked about having @override mean \"it\u0027s ok to omit arguments\", and @inheritDoc mean \"all the arguments in the original documentation must be in the function\"","timestamp":1305926934,"attachments":[]},{"id":4,"commenterId":-2020703049423688535,"content":"On p.151 of Closure: The Definitive Guide, I give an example of the dangers of introducing a new, optional argument to a function that is used as a listener function, which is why I discourage omitting the event variable in the signature.\r\n\r\nI included this example because I\u0027ve definitely been stung by it, and it\u0027s hard to track down when it happens!\r\n\r\nNot sure if it completely maps to the current bug at hand, though.","timestamp":1306507870,"attachments":[]},{"id":5,"commenterId":1328304962299559429,"content":"This issue was closed by revision r1742.","timestamp":1327420413,"attachments":[]}]}