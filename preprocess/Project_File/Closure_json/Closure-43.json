{"id":314,"status":"Fixed","summary":"@lends does not work unless class is defined beforehand","labels":["Type-Defect","Priority-Medium"],"stars":2,"commentCount":9,"comments":[{"id":0,"commenterId":-391201824832259301,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\nWith advanced optimizations enabled as well as type checking (--jscomp_error\u003dcheckTypes), try to use @lends in the same way it\u0027s used on the jsdoc page at http://code.google.com/p/jsdoc-toolkit/wiki/TagLends - using either a utility method called \u0026quot;makeClass\u0026quot; or another method of class constructing such as John Resig\u0027s method at http://ejohn.org/blog/simple-javascript-inheritance/\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\nExpected output is to have code compiled but instead I get a compile error such as:\r\n\r\nERROR - Variable Person.prototype not declared before @lends annotation.\r\n\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nLatest svn build, OS X.\r\n\r\n","timestamp":1294700042,"attachments":[{"id":-5796353075693434433,"fileName":"test.js","fileSize":286}]},{"id":1,"commenterId":6454800031398885070,"content":"Nick, do you have thoughts about this?","timestamp":1294762256,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"I do, but I haven\u0027t organized them yet. :)\r\n\r\nFor example, I think that doing:\r\n\r\nfoo(/** @lends {Bar} */ {});\r\nvar Bar \u003d function() {};\r\n\r\nshould probably invalid. So, the bug, as stated is working as intended.\r\n\r\nBut it seems reasonable to support @lends in the statement where a symbol is declared.\r\n\r\ndoes that sound right?","timestamp":1294765673,"attachments":[]},{"id":3,"commenterId":-391201824832259301,"content":"Yes, the intent of this bug report is to allow for the use of @lends in the same statement where the symbol is declared.","timestamp":1294774615,"attachments":[]},{"id":4,"commenterId":3979207862653524255,"content":"Hey Googler\u0027,s\r\n\r\nWe at Sprout have been using the Google Closure Compiler to compile our mobile ads. We took an initial pass at trying to compile our code using ADVANCED_OPTIMIZATIONS but our JS code uses a very similar extension model to that of John Resig\u0027s simple inheritance  http://ejohn.org/blog/simple-javascript-inheritance/ as posted in the initial bug. It seems that it\u0027s still not possible to use the @lends annotation inline as described by this ticket.\r\n\r\nIs this bug on the roadmap for a fix anytime soon?\r\n\r\nThanks,\r\nBrian","timestamp":1326492893,"attachments":[]},{"id":5,"commenterId":-7699928860083865744,"content":"I haven\u0027t heard any other complaints about it, or gotten any proposed patches for it, so I assumed it was lower priority. (I guess I use @lends-based inheritance differently than you do.) I can look at this next week if it\u0027s important to you.","timestamp":1326500813,"attachments":[]},{"id":6,"commenterId":3979207862653524255,"content":"Hey Nick,\r\n\r\nThat would really be awesome! We\u0027d definitely appreciate a fix as we\u0027re starting to integrate some of the more advanced features of the Closure Compiler into both our local development workflow as a debug tool and our production deployment for performance improvements.\r\n\r\nThanks,\r\nBrian","timestamp":1326501913,"attachments":[]},{"id":7,"commenterId":8011348248719239287,"content":"Hi Nick,\r\n\r\nI\u0027d second that this will be a nice feature to allow Closure to be used with other third-party libraries.\r\n\r\nI have been forced to preprocess my Dojo sources to split \"dojo.declare\" calls into two statements in order to avoid this error.  For example:\r\n\r\nvar some.Class \u003d dojo.declare(\"some.Class\", { prototype methods... });\r\n\r\nmust be turned into:\r\n\r\n/** @constructor */\r\nvar some.Class \u003d function() {};\r\nsome.Class \u003d dojo.declare(\"some.Class\", /** @lends {some.Class} */ { prototype methods... });\r\n\r\nin order to compile.  This, however, is a hack and turning one statement into two is not always possible in the context of code.\r\n","timestamp":1326508351,"attachments":[]},{"id":8,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r1727.","timestamp":1326842098,"attachments":[]}]}