{"id":486,"status":"Fixed","summary":"String escaping mishandles null byte","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":6,"comments":[{"id":0,"commenterId":-5450212342862926778,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. Run:\r\nvar x \u003d \u0026quot;\\u00003\u0026quot;; if (x.length \u0026lt; 2) { alert(\u0026quot;fail\u0026quot;); } else { alert(\u0026quot;win\u0026quot;); }\r\n2. Compile and run\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n\u0026quot;win\u0026quot; is expected. \u0026quot;fail\u0026quot; is observed\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nr1167 on OS x 10.6\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\nThe problem is here: http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CodeGenerator.java#1015\r\n\r\nHere\u0027s a patch that fixes it:\r\n$ svn diff\r\nIndex: src/com/google/javascript/jscomp/CodeGenerator.java\r\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n--- src/com/google/javascript/jscomp/CodeGenerator.java\t(revision 1167)\r\n+++ src/com/google/javascript/jscomp/CodeGenerator.java\t(working copy)\r\n@@ -1012,7 +1012,7 @@\r\n     for (int i \u003d 0; i \u0026lt; s.length(); i++) {\r\n       char c \u003d s.charAt(i);\r\n       switch (c) {\r\n-        case \u0027\\0\u0027: sb.append(\u0026quot;\\\\0\u0026quot;); break;\r\n+        case \u0027\\0\u0027: sb.append(\u0026quot;\\\\000\u0026quot;); break;\r\n         case \u0027\\n\u0027: sb.append(\u0026quot;\\\\n\u0026quot;); break;\r\n         case \u0027\\r\u0027: sb.append(\u0026quot;\\\\r\u0026quot;); break;\r\n         case \u0027\\t\u0027: sb.append(\u0026quot;\\\\t\u0026quot;); break;\r\n\r\nYou could also lookahead and output \u0026quot;\\\\000\u0026quot; only if the following char is 0-7 (octal valid) and otherwise output \u0026quot;\\\\0\u0026quot;. Is 2 bytes worth the complexity?","timestamp":1307668775,"attachments":[]},{"id":1,"commenterId":-5450212342862926778,"content":"This bug was introduced in r904 \"Special case the NUL character\"","timestamp":1307670950,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"thanks for the patch.\r\n\r\nCan you sign a CLA so that we can accept patches from you? See this for more explanation:\r\nhttp://code.google.com/p/closure-compiler/source/browse/trunk/CONTRIBUTORS","timestamp":1308001533,"attachments":[]},{"id":3,"commenterId":-5450212342862926778,"content":"CLA email sent. I grant sheets@ashimaarts.com licensure privilege over the above patch.","timestamp":1308085575,"attachments":[]},{"id":4,"commenterId":7366615844192858214,"content":"I accept full license rights to the above patch and submit the patch to Google under the aforementioned CLA.","timestamp":1308085647,"attachments":[]},{"id":5,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r1179.","timestamp":1308173638,"attachments":[]}]}