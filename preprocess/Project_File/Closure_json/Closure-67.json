{"id":459,"status":"Fixed","summary":"Advanced compilations renames a function and then deletes it, leaving a reference to a renamed but non-existent function","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":8,"comments":[{"id":0,"commenterId":4065416300816331424,"content":"If we provide the below code to advanced:\r\n\r\n\r\nfunction A() {\r\nthis._x \u003d 1;\r\n}\r\n\r\nA.prototype[\u0027func1\u0027] \u003d // done to save public reference to func1\r\nA.prototype.func1 \u003d function() {\r\n  this._x \u003d 2;\r\n  this.func2();\r\n}\r\n\r\nA.prototype.func2 \u003d function() {\r\n  this._x \u003d 3;\r\n  this.func3();\r\n}\r\n\r\nwindow[\u0027A\u0027] \u003d A;\r\n\r\n\r\nWe get the output:\r\n\r\n\r\nfunction a() {\r\n  this.a \u003d 1\r\n}\r\na.prototype.func1 \u003d a.prototype.b \u003d function() {\r\n  this.a \u003d 2;\r\n  this.c() // Problem!\r\n};\r\nwindow.A \u003d a;\r\n\r\n\r\nSo the compiler emits no errors, and renames \u0027func2\u0027 to \u0027c\u0027 but ends up throwing away the definition of that function!\r\n\r\nThe problem arises when I use:\r\n\r\nA.prototype[\u0027func1\u0027] \u003d // done to save public reference to func1\r\nA.prototype.func1 \u003d function() {\r\n...\r\n}\r\n\r\nThe [\u0027func1\u0027] line is apparently enough to save the reference correctly, but also has the side effect of causing the function innards to do the wrong thing.\r\n\r\nI can of course instead write it as:\r\n\r\nA.prototype[\u0027func1\u0027] \u003d A.prototype.func1;\r\nA.prototype.func1 \u003d function() {\r\n  this._x \u003d 2;\r\n  this.func2();\r\n}\r\n\r\nIn which case Advanced will compile correctly and the results will also be valid.\r\n\r\nfunction a() {\r\n  this.a \u003d 1\r\n}\r\na.prototype.func1 \u003d a.prototype.b;\r\na.prototype.b \u003d function() {\r\n  this.a \u003d 2;\r\n  this.a \u003d 3 // func2, correctly minified\r\n};\r\nwindow.A \u003d a;\r\n\r\n\r\nFor now I can just use the expected way of declaring that func1 export, but since the compiler returns with no errors or warnings and creates a function with no definition, it seems worth reporting.","timestamp":1306159687,"attachments":[]},{"id":1,"commenterId":4065416300816331424,"content":"Addition: The A.prototype[\u0027func1\u0027] \u003d A.prototype.func1; must still go after func1\u0027s definition, and not before.","timestamp":1306160826,"attachments":[]},{"id":2,"commenterId":6454800031398885070,"content":"Please confirm the version of the compiler you are using.  ","timestamp":1306166836,"attachments":[]},{"id":3,"commenterId":4065416300816331424,"content":"This occurs in both the closure compiler service:\r\n\r\nhttp://closure-compiler.appspot.com/home\r\n\r\nAnd in version 1043","timestamp":1306167076,"attachments":[]},{"id":4,"commenterId":-5060162230523776870,"content":"I isolated this to the RemoveUnusedPrototypeProperties pass.","timestamp":1306176368,"attachments":[]},{"id":5,"commenterId":-5060162230523776870,"content":"I have a fix under review","timestamp":1307149637,"attachments":[]},{"id":6,"commenterId":-5060162230523776870,"content":"","timestamp":1307149681,"attachments":[]},{"id":7,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r1160.","timestamp":1307599438,"attachments":[]}]}