{"id":435,"status":"Fixed","summary":"Internal Compiler Error on Bullet","labels":["Type-Defect","Priority-Medium"],"stars":2,"commentCount":6,"comments":[{"id":0,"commenterId":-4789647418563361837,"content":"\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\n1. The attachment is the Bullet physics library, compiled from C++ to JS using Emscripten.\r\n2. I tried to compile it using the Closure Compiler, latest downloadable version (Apr 5 2011), with\r\n\r\njava -jar apr5compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --variable_map_output_file js.vars --js bullet_1_1_q1.js --js_output_file bullet_1_1_q1.cc.js\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\n\r\nI would expect it to compile successfully. Instead it halts (after a few hours) with\r\n\r\n\r\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\njava.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\r\nPlease report this problem.\r\nnull\r\n  Node(LABEL): bullet_1_1_q1.js:60150:8\r\n        $for_body$5: while(1) { \r\n  Parent(BLOCK): bullet_1_1_q1.js:60043:26\r\n      if (__label__ \u003d\u003d 0) {\r\n\r\n\tat com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler.compile(Unknown Source)\r\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)\r\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)\r\n\tat com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)\r\nCaused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\r\nPlease report this problem.\r\nnull\r\n  Node(LABEL): bullet_1_1_q1.js:60150:8\r\n        $for_body$5: while(1) { \r\n  Parent(BLOCK): bullet_1_1_q1.js:60043:26\r\n      if (__label__ \u003d\u003d 0) {\r\n\r\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:129)\r\n\tat com.google.javascript.jscomp.RenameLabels$ProcessLabels.shouldTraverse(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)\r\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)\r\n\tat com.google.javascript.jscomp.RenameLabels.process(Unknown Source)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)\r\n\tat com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler.optimize(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler.access$000(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler$1.call(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler$1.call(Unknown Source)\r\n\tat com.google.javascript.jscomp.Compiler$2.run(Unknown Source)\r\n\tat java.lang.Thread.run(Thread.java:662)\r\nCaused by: java.lang.IllegalStateException\r\n\t... 40 more\r\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\n\r\nThe Closure Compiler download from Apr 5 2011, on Ubuntu 10.04 32 bit.\r\n","timestamp":1303864945,"attachments":[{"id":4350000000,"fileName":"bullet_1_1_q1.js.tar.bz2","fileSize":1851527}]},{"id":1,"commenterId":-5060162230523776870,"content":"We should split this into two issues, one for the exception and one for the runtime.  In my first attempt to reproduce this the \"coalesceVariableNames\" pass ran for 30 minutes before I killed it.","timestamp":1304265918,"attachments":[]},{"id":2,"commenterId":-5060162230523776870,"content":"I should also not that \"flowSensitiveInlineVariables\" ran to completion in 70 seconds (which is too long, as well).","timestamp":1304266351,"attachments":[]},{"id":3,"commenterId":-5060162230523776870,"content":"The exception is caused by the function inliner.  It isn\u0027t making label names unique when inlining functions containing them, resulting in an invalid AST if the call site is contains in a label with the same name as the the inlined function contains.  \r\nIt should be simple to fix.","timestamp":1304270745,"attachments":[]},{"id":4,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r1050.","timestamp":1304380580,"attachments":[]},{"id":5,"commenterId":1948758734812428220,"content":"Interesting. I was just reading the Emscripten paper last week.\r\n\r\nThis looks like lots of opportunities for both variable inliner and variable name coalescing. I think that\u0027s why it spends so much time on it. We never really tested on generated code that looks like 3 address SSA forms so it might not be optimized in terms of compilation time.\r\n\r\nWe should create a seperate issue to address the compilation time.\r\n\r\n-Alan","timestamp":1304381378,"attachments":[]}]}