{"id":820,"status":"Fixed","summary":"Obfuscated code triggers TypeError in Firefox","labels":["Type-Defect","Priority-Medium"],"stars":0,"commentCount":9,"comments":[{"id":0,"commenterId":-1222894244467595987,"content":"The Closure Compiler is a great tool, but I\u0027m having problems with it. It often produces code that triggers TypeError in Firefox, even though original code does not. Here is why. The original code may look as follows:\r\n\r\nfunction(argument){\r\n...//use argument\r\nvar variable \u003d ...;\r\n...//argument not used anymore\r\n}\r\n\r\nBut often Closure Compiler will translate it to:\r\nfunction(a){\r\n...\r\nvar a \u003d ...;\r\n...\r\n}\r\n\r\nThis is not wrong JS, since argument is no longer used, Closure Compiler tries to reuse the name \u0027a\u0027 for something else.\r\n\r\nThis triggers the following in Firefox 13-15:\r\nTypeError: variable a re-declares argument\r\n\r\nStill, the resulting code is correct and runs, but it\u0027s very annoying debugging it when I\u0027m getting all the time a lot of TypeErrors in the console.\r\n\r\nAlso, our customers have noticed these TypeErrors when testing the product and it undermines our code reliability.\r\n\r\nCould you please rename variables in such a way as to avoid these TypeErrors (not to rename vars in a way that will coincide with function argument names)?\r\n\r\n\u003cb\u003eWhat steps will reproduce the problem?\u003c/b\u003e\nThis happens reproducibly on our real-life JS input, which I cannot submit for various reasons. If my problem description is not clear enough, please make a comment and I will try to construct some artificial example that also triggers the TypeError.\r\n\r\n\u003cb\u003eWhat is the expected output? What do you see instead?\u003c/b\u003e\nThe expected output is obfuscated code with variables renamed to unique names, in order not to trigger TypeError in Firefox. Instead I see variables renamed to the same name, which runs OK, but Firefox complains with TypeError.\r\n\r\n\u003cb\u003eWhat version of the product are you using? On what operating system?\u003c/b\u003e\nClosure Compiler (http://code.google.com/closure/compiler)\r\nVersion: 20120917 (revision 2180)\r\nBuilt on: 2012/09/17 14:33\r\n\r\n\u003cb\u003ePlease provide any additional information below.\u003c/b\u003e\n","timestamp":1348155517,"attachments":[]},{"id":1,"commenterId":-5060162230523776870,"content":"It seems like we could avoid redeclaring the \"var\" and simply reuse the name, which might be a size win as well.  Although, it seems strange that FF is generating this warning using \"TypeError\".  Have you filed a bug for this as well?","timestamp":1348158496,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"hmmm...i haven\u0027t been able to reproduce this, either on the closure-compiler side or the firefox side.\r\n\r\nCan you give us an example of a script and compiler invocation where this happens?\r\n\r\nalternatively, is there some special setting in firefox 15 that i have to turn on to make this console warning appear? If i had that, i could probably find my own repro case.","timestamp":1348261023,"attachments":[]},{"id":3,"commenterId":-5060162230523776870,"content":"I can reproduce it on the firefox side by enable \"javascript.options.strict\" in about.config.  This option isn\u0027t normally on so personally, I\u0027m not sure I care about this.  This is really noisy and somewhat contraversal http://www.howtocreate.co.uk/strictJSFirefox.html.\r\n\r\nI would be happy to remove the extra \"var\" however if we can get a repro case.","timestamp":1348339843,"attachments":[]},{"id":4,"commenterId":-1222894244467595987,"content":"No, I have never fiddled with firefox options, but I do have \u0027use strict\u0027 in all my JS sources to help me find strange JS bugs, etc. So here is a sample that triggers this, for reference:\r\n\r\n\u0027use strict\u0027;\r\nfunction f(x){\r\n    var x \u003d 1;\r\n}\r\n\r\nThis is not produced by Closure Compiler, but by me. It would be very time consuming to try to guess some JS source that after compilation has this problem, because I don\u0027t know when Closure Compiler produces such an outcome. I get this multiple times when compiling my huge JS codebase, but can\u0027t provide a small sample that does it.","timestamp":1348756861,"attachments":[]},{"id":5,"commenterId":-1222894244467595987,"content":"Here are some samples of code actually produced by Closure Compiler:\r\n\r\nwindow.onpopstate \u003d function(a) {\r\n  if(a \u0026\u0026 a.state \u0026\u0026 a.state.viewName) {\r\n  var a \u003d a.state.viewName, b \u003d q[a];\r\n  b \u0026\u0026 (!J || \"faq\" \u003d\u003d a || q.t) ? b.B() : J \u0026\u0026 Q()\r\n  }\r\n};\r\n\r\nAs you can see, var is necessary because a new variable \u0027b\u0027 is declared. Another example:\r\n\r\nfunction yd(a, b, e, f, j, g) {\r\nvar k \u003d K(a), t \u003d a.getTime() \u003d\u003d\u003d q.ed, j \u003d j.aa({ub:function() {\r\n...\r\n\r\nHere \u0027k\u0027 and \u0027t\u0027 are new, so var is needed. Currently I\u0027m getting this error 8 times, in 8 functions, and in each case it\u0027s a mix of existing function arguments and new variables that are assigned to in var statement.\r\n\r\nI did some more investigating and I can see that Closure Compiler actually removes my \u0027use strict\u0027 when compiling. So the resulting script is not in strict mode. I actually consider this behavior a bug (that Closure Compiler removes \u0027use strict\u0027 statement). Should I file a separate bug report for that?\r\n","timestamp":1348835733,"attachments":[]},{"id":6,"commenterId":-7699928860083865744,"content":"we believe you that this happens. we\u0027re looking for a repro case. We don\u0027t need more examples of output. ","timestamp":1348839898,"attachments":[]},{"id":7,"commenterId":-5060162230523776870,"content":"Actually, that does help. I was able to put together a unit test for CollaspseVariableDeclarations that reproduces the problem:\r\n\r\nfunction f(a) { var b\u003d1; a\u003d2; var c }\r\n\r\ngets collapsed to:\r\n\r\nfunction f(a) { var b\u003d1,a\u003d2,c }\r\n\r\n","timestamp":1348850655,"attachments":[]},{"id":8,"commenterId":1328304962299559429,"content":"This issue was closed by revision r2226.","timestamp":1348874005,"attachments":[]}]}