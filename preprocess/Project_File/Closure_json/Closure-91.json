{"id":248,"status":"Fixed","summary":"support @lends annotation","labels":["Type-Defect","Priority-Medium"],"stars":1,"commentCount":4,"comments":[{"id":0,"commenterId":3781549706279439423,"content":"Some javascript toolkits (dojo, base, etc.) have a special way of declaring (what java calls) classes, for example in dojo:\r\n\r\ndojo.declare(\u0026quot;MyClass\u0026quot;, [superClass1, superClass2], { \r\n    foo: function(){ ... } \r\n    bar: function(){ ... } \r\n}); \r\n\r\nJSDoc (or at least JSDoc toolkit) supports this via annotations: \r\n\r\n/** \r\n * @name MyClass \r\n * @class \r\n * @extends superClass1 \r\n * @extends superClass2 \r\n */ \r\ndojo.declare(\u0026quot;MyClass\u0026quot;, [superClass1, superClass2], /** @lends \r\nMyClass.prototype */ { \r\n    foo: function(){ ... } \r\n    bar: function(){ ... } \r\n}); \r\n\r\nThe @lends keyword in particular is useful since it tells JSDoc that foo and bar are part of MyClass\u0027s prototype.   But closure compiler isn\u0027t picking up on that, thus I get a bunch of errors about \u0026quot;dangerous use of this\u0026quot; inside of foo() and bar(). \r\n\r\nSo, can @lends support be added to the closure compiler?\r\n\r\nThe workaround is to use @this on every method, but not sure if that is sufficient to make advanced mode compilation work correctly.","timestamp":1285061838,"attachments":[]},{"id":1,"commenterId":-7699928860083865744,"content":"i ran into a situation today where i really really wanted a @lends tag.\r\n\r\nin theory, this should be easy to implement, because it\u0027s equivalent to goog.object.reflect, which already has native compiler support.","timestamp":1285210712,"attachments":[]},{"id":2,"commenterId":-7699928860083865744,"content":"This issue was closed by revision r506.","timestamp":1288020193,"attachments":[]},{"id":3,"commenterId":-7699928860083865744,"content":"one nit: you\u0027ll have to surround the object literal in parentheses to make this work. we\u0027ve got to get some changes upstream to Rhino in order for this to work without the parens.","timestamp":1288022972,"attachments":[]}]}